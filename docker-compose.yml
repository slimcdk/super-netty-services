version: '3.8'

secrets:
  secrets:
    file: ./secrets/secrets.yaml
  ha-service-account:
    file: ./secrets/ha-service-account.json
  dns-service-account:
    file: ./secrets/dns-service-account.json
  mqtt-pwfile:
    file: ./secrets/pwfile


services:

  # A

  # B

  ## Bazarr
  ### https://hub.docker.com/r/linuxserver/bazarr
  bazarr:
    image: linuxserver/bazarr:latest
    container_name: bazarr
    network_mode: service:rathole
    extends:
      file: docker-compose-base.yml
      service: base-setting
    volumes:
      - ${PWD}/services/bazarr/appdata:/config:rw
      - ${MEDIA_ROOT}:/media:rw
    depends_on:
      - jackett
      - rathole
      - qbittorrent


  # C

 

  ## VSCode editor in the browser
  ### https://hub.docker.com/r/linuxserver/code-server
  code_server:
    image: linuxserver/code-server:latest
    container_name: code_server
    privileged: true
    extends:
      file: docker-compose-base.yml
      service: base-setting
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /root/.docker/config.json:/config.json
      - /usr/bin/docker:/usr/bin/docker
      - /etc/docker:/etc/docker
      - /usr/local/bin/docker-compose:/usr/local/bin/docker-compose
      - ${PWD}/services/code-server/appdata:/config:rw
      - ${PWD}:/mnt/containers
    ports:
      - 4000:8443


  ## Cupsd
  ### https://github.com/olbat/dockerfiles/tree/master/cupsd
  cupsd:
    image: olbat/cupsd
    container_name: cupsd
    privileged: true
    extends:
      file: docker-compose-base.yml
      service: base-setting
    volumes:
      - ${PWD}/services/cupsd/appdata:/config:rw
      - /var/run/dbus:/var/run/dbus
    ports:
      - 631:631
    


  # D

  ## Duplicati 2.0
  ### https://hub.docker.com/r/linuxserver/duplicati
  duplicati:
    image: linuxserver/duplicati:latest
    container_name: duplicati
    extends:
      file: docker-compose-base.yml
      service: base-setting
    environment:
      - CLI_ARGS=--server-datafolder=/data
    volumes:
      - ${PWD}/services/duplicati/appdata/config:/config:rw
      - ${PWD}/services/duplicati/database:/data:rw
      - ${BACKUP_VAULT}:/backups:rw
      - ${PWD}:/source:ro
      - /boot:/host-source/boot:ro # Unraid USB thumb drive
    ports:
      - 8200:8200


  ## DiskSpeed
  ### https://hub.docker.com/r/jbartlett777/diskspeed/
  diskspeed:
    image: jbartlett777/diskspeed:latest
    container_name: diskspeed
    privileged: true
    extends:
      file: docker-compose-base.yml
      service: base-setting
    volumes:
      - ${PWD}/services/diskspeed/appdata:/tmp/DiskSpeed:rw
    ports:
      - 18888:8888/tcp

  

  
  # E

  ## ESPHome Dashboard
  ### https://hub.docker.com/r/esphome/esphome
  esphome:
    image: esphome/esphome:latest
    container_name: esphome
    network_mode: host
    privileged: true
    extends:
      file: docker-compose-base.yml
      service: base-setting
    secrets:
      - secrets
    environment:
      - HOSTNAME=esphome
    volumes:
      - ${PWD}/services/esphome/appdata:/config:rw
    devices:
      - /dev/ttyUSB0:/dev/ttyUSB0
    restart: unless-stopped


  # F


  # G
  ## Grocy
  ### https://hub.docker.com/r/linuxserver/grocy
  grocy:
    image: linuxserver/grocy:latest
    container_name: grocy
    extends:
      file: docker-compose-base.yml
      service: base-setting
    volumes:
      - ${PWD}/services/grocy/appdata:/config:rw
    ports:
      - 9192:80




  # H
  ## Hammond
  ### https://github.com/akhilrex/hammond
  hammond:
    image: akhilrex/hammond:latest
    container_name: hammond
    extends:
      file: docker-compose-base.yml
      service: base-setting
    volumes:
      - ${PWD}/services/hammond/appdata:/config:rw
      - ${HAMMOND_ASSETS}:/assets
    ports:
      - 3000:3000


  ## Home Assistant Core
  ### https://hub.docker.com/r/homeassistant/home-assistant
  homeassistant:
    image: homeassistant/home-assistant:latest #2021.4.0
    container_name: homeassistant
    network_mode: host
    privileged: true
    extends:
      file: docker-compose-base.yml
      service: base-setting
    secrets:
      - secrets
      - ha-service-account
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /usr/bin/docker:/usr/bin/docker:ro
      - ${PWD}/services/homeassistant/appdata:/config:rw
      - ${PWD}/services/homeassistant/logs:/usr/share/hassio/homeassistant:rw
      - ${MEDIA_ROOT}:/media:ro
      - ${PWD}/services/esphome/appdata:/esphome:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8123"]
      interval: 30s
      timeout: 10s
      retries: 6
    devices:
      - /dev/ttyACM0:/dev/ttyACM0
    command: bash -c "pip3 install --upgrade pip; pip3 install pymysql; /init"  #  needed for MariaDB https://www.home-assistant.io/integrations/recorder/#mariadb-and-mysql
    depends_on:
      - homeassistant_db
      - mosquitto
      - plex
      - netdata
      - unifi_controller
      - rathole
      - jackett
      - bazarr
      - radarr
      - sonarr
      - lidarr
      - qbittorrent
      - grocy
      - proxy


  ## MariaDB - MySQL database for Home Assistant
  ### https://hub.docker.com/r/linuxserver/mariadb
  homeassistant_db:
    image: linuxserver/mariadb:latest
    container_name: homeassistant_db
    extends:
      file: docker-compose-base.yml
      service: base-setting
    environment:
      - MYSQL_ROOT_PASSWORD=${ADMIN_PASS}
      - MYSQL_ROOT_USER=${ADMIN_USER}
      - MYSQL_DATABASE=${HA_DATABASE_NAME}
      - MYSQL_USER=${HA_DATABASE_USER}
      - MYSQL_PASSWORD=${HA_DATABASE_PASS}
    volumes:
      - ${PWD}/services/homeassistant/database:/config:rw
    ports:
      - 3306:3306


  # I



  # J

  ## Jackett
  ### https://hub.docker.com/r/linuxserver/jackett
  jackett:
    image: linuxserver/jackett:latest
    container_name: jackett
    network_mode: service:rathole
    extends:
      file: docker-compose-base.yml
      service: base-setting
    environment:
      - AUTO_UPDATE=true
    volumes:
      - ${PWD}/services/jackett/appdata:/config:rw
    depends_on:
      - rathole



  # K


 
  # L

  ## Lidarr
  ### https://hub.docker.com/r/linuxserver/lidarr
  lidarr:
    image: linuxserver/lidarr:latest
    container_name: lidarr
    network_mode: service:rathole
    extends:
      file: docker-compose-base.yml
      service: base-setting
    volumes:
      - ${PWD}/services/lidarr/appdata:/config:rw
      - ${MEDIA_ROOT}:/media:rw
    depends_on:
      - rathole
      - jackett
      - qbittorrent



  # M
  ## MagicMirror2
  ### https://github.com/bastilimbach/docker-MagicMirror
  ### https://github.com/MichMich/MagicMirror
#  magicmirror:
#    image: bastilimbach/docker-magicmirror:latest
#    container_name: magicmirror
##    network_mode: host
#    ports:
#      - 8888:8080
#    extends:
#      file: docker-compose-base.yml
#      service: base-setting
#    volumes:
#      - ${PWD}/services/magic-mirror/appdata/config:/opt/magic_mirror/config
#      - ${PWD}/services/magic-mirror/appdata/modules:/opt/magic_mirror/modules


  ## MQTT broker
  ### https://hub.docker.com/r/
  mosquitto:
    image: cmccambridge/mosquitto-unraid:latest
    container_name: mosquitto
    secrets:
      - mqtt-pwfile
    extends:
      file: docker-compose-base.yml
      service: base-setting
    volumes:
      - ${PWD}/services/mosquitto/appdata/conf:/mosquitto/config:rw
      - ${PWD}/services/mosquitto/appdata/logs:/mosquitto/log:rw
      - ${PWD}/services/mosquitto/appdata/data:/mosquitto/data:rw
    ports:
      - 1883:1883
      - 8883:8883
      - 9001:9001


  # N

  ## NodeRed
  ### https://hub.docker.com/r/nodered/node-red
#  node_red:
#    image: nodered/node-red:latest
#    container_name: node_red
#    ports:
#      - 1880:1880
#    extends:
#      file: docker-compose-base.yml
#      service: base-setting
#    volumes:
#      - ${PWD}/services/nodered/appdata:/data:rw


  ## NetData
  ### https://hub.docker.com/r/netdata/netdata
  netdata:
    image: netdata/netdata:latest
    container_name: netdata
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    extends:
      file: docker-compose-base.yml
      service: base-setting
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - 19999:19999

  # O


  # P

  ## Nginx Reverse Proxy
  ### https://hub.docker.com/r/linuxserver/swag
  proxy:
    image: linuxserver/swag:latest
    container_name: proxy
    secrets:
      - dns-service-account  # dynamic link used ':./services/proxy/conf/dns-conf$ ln -s /run/secrets/dns-service-account google.json'
    cap_add:
      - NET_ADMIN
    extends:
      file: docker-compose-base.yml
      service: base-setting
    environment:
      - EMAIL=${ADMIN_EMAIL}
      - URL=${EXTERNAL_BASEURL}
      - SUBDOMAINS=wildcard
      - ONLY_SUBDOMAINS=false
      - VALIDATION=dns
      - DNSPLUGIN=google
      - DHLEVEL=2048
      - STAGING=false
      - CERTPROVIDER=zerossl
    volumes:
      - ${PWD}/services/proxy/appdata/config:/config:rw
      - ${PWD}/services/proxy/appdata/proxy-confs:/config/nginx/proxy-confs:ro
    ports:
      - 80:80
      - 443:443


  ## PLEX
  ### https://hub.docker.com/r/linuxserver/plex
  plex:
    image: linuxserver/plex:latest
    container_name: plex
    network_mode: host
    privileged: true
    extends:
      file: docker-compose-base.yml
      service: base-setting
    environment:
      - VERSION=docker
    volumes:
      - ${PWD}/services/plex/appdata:/config:rw
      - ${MEDIA_ROOT}/entertainment:/media/entertainment:rw



  # Q

  ## qBittorrent
  ### https://hub.docker.com/r/linuxserver/qbittorrent
  qbittorrent:
    image: linuxserver/qbittorrent:latest
    container_name: qbittorrent
    network_mode: service:rathole
    extends:
      file: docker-compose-base.yml
      service: base-setting
    environment:
      - WEBUI_PORT=8090
    volumes:
      - ${PWD}/services/qbittorrent/appdata:/config:rw
      - ${MEDIA_ROOT}/downloads/incomplete:/media/downloads/incomplete:rw
      - ${MEDIA_ROOT}/downloads/completed:/media/downloads/completed:rw
    depends_on:
      - rathole


  
  # R

 
  ## Readarr
  ### https://hub.docker.com/r/hotio/readarr
  readarr:
    image: hotio/readarr:nightly
    container_name: readarr
    network_mode: service:rathole
    extends:
      file: docker-compose-base.yml
      service: base-setting
    volumes:
      - ${PWD}/services/readarr/appdata:/config:rw
      - ${MEDIA_ROOT}:/media:rw
    depends_on:
      - jackett
      - rathole
      - qbittorrent



  ## Radarr
  ### https://hub.docker.com/r/linuxserver/radarr
  radarr:
    image: linuxserver/radarr:latest
    container_name: radarr
    network_mode: service:rathole
    extends:
      file: docker-compose-base.yml
      service: base-setting
    volumes:
      - ${PWD}/services/radarr/appdata:/config:rw
      - ${MEDIA_ROOT}:/media:rw
    depends_on:
      - jackett
      - rathole
      - qbittorrent



  # S

  ## Seafile
  ### https://manual.seafile.com/docker/deploy%20seafile%20with%20docker/
#  seafile:
#    image: seafileltd/seafile-mc:latest
#    container_name: seafile
#    extends:
#      file: docker-compose-base.yml
#      service: base-setting
#    environment:
#      - SEAFILE_ADMIN_EMAIL=${ADMIN_EMAIL}
#      - SEAFILE_ADMIN_PASS=${ADMIN_PASS}
#      - SEAFILE_SERVER_HOSTNAME=${SF_EXTERNAL_DOMAIN}
#    volumes:
#      - ${PWD}/services/seafile/appdata:/shared:rw
#      - ${SEAFILE_DATA_DIR}:/data:rw
#    ports:
#      - 5443:443
#      - 580:80
#    depends_on:
#      - seafile_db
#      - seafile_memcached
#      - seafile_elasticsearch
#
#  seafile_db:
#    image: linuxserver/mariadb:latest
#    container_name: seafile_db
#    environment:
#      - MYSQL_ROOT_PASSWORD=${ADMIN_PASS}
#      - MYSQL_ROOT_USER=${ADMIN_USER}
#      - MYSQL_DATABASE=${SF_DATABASE}
#      - MYSQL_USER=${SF_USER}
#      - MYSQL_PASSWORD=${SF_PASS}
#    volumes:
#      - ${PWD}/services/seafile/database:/config:rw
#
#  seafile_memcached:
#    image: memcached:1.5.6
#    container_name: seafile_memcached
#    entrypoint: memcached -m 256
#    extends:
#      file: docker-compose-base.yml
#      service: base-setting
#
#  seafile_elasticsearch:
#    image: seafileltd/elasticsearch-with-ik:5.6.16
#    container_name: seafile_elasticsearch
#    extends:
#      file: docker-compose-base.yml
#      service: base-setting
#    environment:
#      - discovery.type=single-node
#      - bootstrap.memory_lock=true
#      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
#    ulimits:
#      memlock:
#        soft: -1
#        hard: -1
#    mem_limit: 2g
##    volumes:
##      - /opt/seafile-elasticsearch/data:/usr/share/elasticsearch/data  # Requested, specifies the path to Elasticsearch data persistent store.


  ## Sonarr
  ### https://hub.docker.com/r/linuxserver/sonarr
  sonarr:
    image: linuxserver/sonarr:latest
    container_name: sonarr
    network_mode: service:rathole
    extends:
      file: docker-compose-base.yml
      service: base-setting
    volumes:
      - ${PWD}/services/sonarr/appdata:/config:rw
      - ${MEDIA_ROOT}:/media:rw
    depends_on:
      - jackett
      - rathole
      - qbittorrent
    restart: unless-stopped



  # T


  # U

  ## UniFi Controller
  ### https://hub.docker.com/r/linuxserver/unifi-controller
  unifi_controller:
    image: linuxserver/unifi-controller:latest
    extends:
      file: docker-compose-base.yml
      service: base-setting
    container_name: unifi_controller
    environment:
      - MEM_LIMIT=768M
    volumes:
      - ${PWD}/services/unifi/appdata:/config:rw
    ports:
      - 8443:8443
      - 6789:6789
      - 3478:3478
      - 10001:10001
      - 8080:8080


  ## Unraid API
  ### https://github.com/ElectricBrainUK/UnraidAPI
  unraid_api:
    image: electricbrainuk/unraidapi:anyport
    container_name: unraid_api
    extends:
      file: docker-compose-base.yml
      service: base-setting
    volumes:
      - ${PWD}/services/unraid-api/appdata/conf:/app/config:rw
    environment:
      - NUXT_PORT=81
      - KeyStorage=config
    ports:
      - 81:81
    depends_on:
      - mosquitto



  # V

  ## NORDVPN VPN
  ### https://github.com/bubuntux/nordvpn
  rathole:
    image: bubuntux/nordvpn:latest
    container_name: rathole
    network_mode: bridge
    extends:
      file: docker-compose-base.yml
      service: base-setting
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.conf.all.rp_filter=2
    devices:
      - /dev/net/tun
    environment:
      - USER=${VPN_USER}
      - PASS=${VPN_PASS}
      - CONNECT=${VPN_CONNECT}
      - TECHNOLOGY=NordLynx
      - NETWORK=192.168.1.0/24
    ports:
      - 9117:9117   # jackett
      - 8989:8989   # sonarr
      - 7878:7878   # radarr
      - 6767:6767   # bazarr
      - 8686:8686   # lidarr
      - 8090:8090   # qbittorrent
      - 6881:6881   # qbittorrent
      - 8787:8787   # readarr
    volumes:
      - ${PWD}/services/rathole/appdata/log/nordvpn:/var/log/nordvpn:rw


  # W
  ## WatchTower
  ### https://containrrr.dev/watchtower/
  watchtower:
    image: containrrr/watchtower:amd64-latest
    container_name: watchtower
    extends:
      file: docker-compose-base.yml
      service: base-setting
    environment:
#      - WATCHTOWER_ROLLING_RESTART=true
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_REMOVE_VOLUMES=true
      - WATCHTOWER_INCLUDE_RESTARTING=true
#      - WATCHTOWER_POLL_INTERVAL=43200
      - WATCHTOWER_HTTP_API_METRICS=true
      - WATCHTOWER_HTTP_API_TOKEN=${ADMIN_PASS}
#      - WATCHTOWER_SCHEDULE="0 0 4 * * *"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /root/.docker/config.json:/config.json
    ports:
      - 9090:8080


  ## WireGuard
  ### https://docs.linuxserver.io/images/docker-wireguard
#  wireguard:
#    image: linuxserver/wireguard
#    container_name: wireguard
#    extends:
#      file: docker-compose-base.yml
#      service: base-setting
#    cap_add:
#      - NET_ADMIN
#      - SYS_MODULE
#    environment:
##      - SERVERURL=wireguard.domain.com #optional
##      - SERVERPORT=51820 #optional
##      - PEERS=1 #optional
##      - PEERDNS=auto #optional
##      - INTERNAL_SUBNET=10.13.13.0 #optional
#    volumes:
#      - ${PWD}/services/appdata/wireguard:/config
##      - /lib/modules:/lib/modules
#    ports:
#      - 51820:51820/udp
#    sysctls:
#      - net.ipv4.conf.all.src_valid_mark=1
     

  # X

  # Y

  # Z
